{"version":3,"sources":["../dist-esnext/Battle.test.js"],"names":["battle","Field","describe","fieldConfig","before","bombs","width","height","it","result","startBattle","newBattle","opened","invalidPos","x","y","clickPosition","allPositions","field","map","p","should","be","equal","valid","not","openedFirst","openedSecond","result2","valid2","find","propEq","clicked","marked","battleMarkPosition"],"mappings":"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","file":"Battle.test.js","sourcesContent":["import { ok } from 'ptz-assert';\nimport R from 'ramda';\nimport * as battle from './Battle';\nimport * as Field from './Field';\ndescribe('Battle', () => {\n    describe('startBattle', () => {\n        let fieldConfig;\n        before('Set field config', () => {\n            fieldConfig = {\n                bombs: 9, width: 9, height: 9\n            };\n        });\n        it('returns new battle', () => {\n            const result = battle.startBattle(fieldConfig);\n            ok(result);\n        });\n    });\n    describe('clickPosition', () => {\n        let fieldConfig;\n        before('Set field config', () => {\n            fieldConfig = {\n                bombs: 9, width: 9, height: 9\n            };\n        });\n        it('shold not open if position is invalid ', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            let opened = 0;\n            const invalidPos = { x: -1, y: -1 };\n            const result = battle.clickPosition(newBattle, invalidPos);\n            Field.allPositions(result.field).map(p => p.opened ? opened++ : opened);\n            opened.should.be.equal(0);\n        });\n        it('shold open if position is valid ', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            let opened = 0;\n            const valid = { x: 1, y: 1 };\n            const result = battle.clickPosition(newBattle, valid);\n            Field.allPositions(result.field).map(p => p.opened ? opened++ : opened);\n            opened.should.not.be.equal(0);\n        });\n        it('shold not open if position is open', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            let openedFirst = 0;\n            let openedSecond = 0;\n            const valid = { x: 1, y: 1 };\n            const result = battle.clickPosition(newBattle, valid);\n            const result2 = battle.clickPosition(result, valid);\n            Field.allPositions(result.field).map(p => p.opened ? openedFirst++ : openedFirst);\n            Field.allPositions(result2.field).map(p => p.opened ? openedSecond++ : openedSecond);\n            openedFirst.should.be.equal(openedSecond);\n        });\n        it('shold open if position is not open', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            let openedFirst = 0;\n            let openedSecond = 0;\n            const valid = { x: 1, y: 1 };\n            const result = battle.clickPosition(newBattle, valid);\n            let valid2;\n            valid2 = R.find(R.propEq('opened', false), Field.allPositions(result.field));\n            Field.allPositions(result.field).map(p => p.opened ? openedFirst++ : openedFirst);\n            const result2 = battle.clickPosition(result, valid2);\n            Field.allPositions(result2.field).map(p => p.opened ? openedSecond++ : openedSecond);\n            openedFirst.should.be.not.equal(openedSecond);\n        });\n        it('shold open if position is not marked', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            const valid = { x: 1, y: 1 };\n            const clicked = battle.clickPosition(newBattle, valid);\n            clicked.field[valid.x][valid.y].opened.should.be.equal(true);\n            clicked.field[valid.x][valid.y].marked.should.be.equal(0);\n            ok(clicked);\n        });\n        it('shold not open if position is marked', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            const valid = { x: 1, y: 1 };\n            const marked = battle.battleMarkPosition(newBattle, valid);\n            const clicked = battle.clickPosition(marked, valid);\n            clicked.field[valid.x][valid.y].opened.should.be.equal(false);\n            clicked.field[valid.x][valid.y].marked.should.be.equal(1);\n            ok(clicked);\n        });\n    });\n    describe('markPosition', () => {\n        let fieldConfig;\n        before('Set field config', () => {\n            fieldConfig = {\n                bombs: 9, width: 9, height: 9\n            };\n        });\n        it('should mark pos if not open', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            const valid = { x: 1, y: 1 };\n            const result = battle.battleMarkPosition(newBattle, valid);\n            result.field[valid.x][valid.y].marked.should.be.equal(1);\n            ok(result);\n        });\n        it('should not mark pos if open', () => {\n            const newBattle = battle.startBattle(fieldConfig);\n            const valid = { x: 1, y: 1 };\n            const clicked = battle.clickPosition(newBattle, valid);\n            const marked = battle.battleMarkPosition(clicked, valid);\n            marked.field[valid.x][valid.y].opened.should.be.equal(true);\n            marked.field[valid.x][valid.y].marked.should.be.equal(0);\n            ok(marked);\n        });\n    });\n});\n//# sourceMappingURL=Battle.test.js.map"]}
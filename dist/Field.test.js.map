{"version":3,"sources":["../dist-esnext/Field.test.js"],"names":["a","field","should","describe","fieldConfig","initialField","beforeEach","bombs","width","height","getInitialField","be","an","it","map","col","pos","isBomb","equal","length","invalidFieldConfig","not","exist","e","countedField","countNearBombs","closedPosition","newPos","openedPosition","openPosition","opened","true","invalidPosition"],"mappings":";;AAAA;;IACYA,C;;AAEZ;;IAAYC,K;;;;AACZ,IAAMC,SAASF,EAAEE,MAAF,EAAf;AAFA;;AADYF,CAIZ,SAAKE,MAAL;AACA;AACA;AACAC,SAAS,OAAT,EAAkB,YAAM;AACpBA,aAAS,iBAAT,EAA4B,YAAM;AAC9B,YAAIC,WAAJ;AACA,YAAIC,YAAJ;AACAC,mBAAW,YAAM;AACbF,0BAAc;AACVG,uBAAO,CADG,EACAC,OAAO,CADP,EACUC,QAAQ;AADlB,aAAd;AAGAJ,2BAAeJ,MAAMS,eAAN,CAAsBN,WAAtB,CAAf;AACAC,yBAAaH,MAAb,CAAoBS,EAApB,CAAuBC,EAAvB,CAA0B,OAA1B;AACH,SAND;AAOAC,WAAG,mDAAH,EAAwD,YAAM;AAC1D,gBAAIN,QAAQ,CAAZ;AACAF,yBAAaS,GAAb,CAAiB;AAAA,uBAAOC,IAAID,GAAJ,CAAQ;AAAA,2BAAOE,IAAIC,MAAJ,GAAaV,OAAb,GAAuBA,KAA9B;AAAA,iBAAR,CAAP;AAAA,aAAjB;AACAA,kBAAML,MAAN,CAAaS,EAAb,CAAgBO,KAAhB,CAAsBd,YAAYG,KAAlC;AACH,SAJD;AAKAM,WAAG,0CAAH,EAA+C,YAAM;AACjDR,yBAAac,MAAb,CAAoBjB,MAApB,CAA2BS,EAA3B,CAA8BO,KAA9B,CAAoCd,YAAYI,KAAhD;AACAH,yBAAa,CAAb,EAAgBc,MAAhB,CAAuBjB,MAAvB,CAA8BS,EAA9B,CAAiCO,KAAjC,CAAuCd,YAAYK,MAAnD;AACH,SAHD;AAIAI,WAAG,gEAAH,EAAqE,YAAM;AACvE,gBAAI;AACA,oBAAMO,qBAAqB;AACvBb,2BAAO,EADgB,EACZC,OAAO,CADK,EACFC,QAAQ;AADN,iBAA3B;AAGAP,uBAAOmB,GAAP,CAAWC,KAAX,CAAiBjB,eAAeJ,MAAMS,eAAN,CAAsBU,kBAAtB,CAAhC;AACH,aALD,CAMA,OAAOG,CAAP,EAAU;AACNA,kBAAErB,MAAF,CAASS,EAAT,CAAYC,EAAZ,CAAe,OAAf;AACH;AACJ,SAVD;AAWAC,WAAG,kBAAH,EAAuB,YAAM;AACzBR,2BAAeJ,MAAMS,eAAN,CAAsBN,WAAtB,CAAf;AACA,gBAAMoB,eAAevB,MAAMwB,cAAN,CAAqBpB,YAArB,CAArB;AACAmB,yBAAatB,MAAb,CAAoBS,EAApB,CAAuBC,EAAvB,CAA0B,OAA1B;AACH,SAJD;AAKH,KAnCD;AAoCAT,aAAS,cAAT,EAAyB,YAAM;AAC3BU,WAAG,iCAAH,EAAsC,YAAM;AACxC,gBAAMa,iBAAiBzB,MAAM0B,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACA,gBAAMC,iBAAiB3B,MAAM4B,YAAN,CAAmBH,cAAnB,CAAvB;AACA;AACAE,2BAAeE,MAAf,CAAsB5B,MAAtB,CAA6BS,EAA7B,CAAgCoB,IAAhC;AACH,SALD;AAMAlB,WAAG,iCAAH,EAAsC,YAAM;AACxC,gBAAMmB,kBAAkB/B,MAAM0B,MAAN,CAAa,CAAC,CAAd,EAAiB,CAAjB,CAAxB;AACA,gBAAMC,iBAAiB3B,MAAM4B,YAAN,CAAmBG,eAAnB,CAAvB;AACA;AACAJ,2BAAeE,MAAf,CAAsB5B,MAAtB,CAA6BS,EAA7B,CAAgCoB,IAAhC;AACH,SALD;AAMH,KAbD;AAcH,CAnDD;AAoDA","file":"Field.test.js","sourcesContent":["import chai from 'chai';\nimport * as a from 'chai';\n// import { LogFile } from 'ptz-log-file';\nimport * as field from './Field';\nconst should = a.should();\nchai.should();\n// import { IPosition } from './IPosition';\n// const log = LogFile({});\ndescribe('Field', () => {\n    describe('getInitialField', () => {\n        var fieldConfig;\n        var initialField;\n        beforeEach(() => {\n            fieldConfig = {\n                bombs: 9, width: 9, height: 9\n            };\n            initialField = field.getInitialField(fieldConfig);\n            initialField.should.be.an('array');\n        });\n        it('bombs in the field should match fieldConfig bombs', () => {\n            var bombs = 0;\n            initialField.map(col => col.map(pos => pos.isBomb ? bombs++ : bombs));\n            bombs.should.be.equal(fieldConfig.bombs);\n        });\n        it('should field size match fieldConfig size', () => {\n            initialField.length.should.be.equal(fieldConfig.width);\n            initialField[0].length.should.be.equal(fieldConfig.height);\n        });\n        it('should throw an error if bombs number is bigger than fild size', () => {\n            try {\n                const invalidFieldConfig = {\n                    bombs: 27, width: 5, height: 5\n                };\n                should.not.exist(initialField = field.getInitialField(invalidFieldConfig));\n            }\n            catch (e) {\n                e.should.be.an('error');\n            }\n        });\n        it('count near bombs', () => {\n            initialField = field.getInitialField(fieldConfig);\n            const countedField = field.countNearBombs(initialField);\n            countedField.should.be.an('array');\n        });\n    });\n    describe('openPosition', () => {\n        it('should return a opened position', () => {\n            const closedPosition = field.newPos(1, 1);\n            const openedPosition = field.openPosition(closedPosition);\n            // tslint:disable-next-line:no-unused-expression\n            openedPosition.opened.should.be.true;\n        });\n        it('should return a opened position', () => {\n            const invalidPosition = field.newPos(-1, 1);\n            const openedPosition = field.openPosition(invalidPosition);\n            // tslint:disable-next-line:no-unused-expression\n            openedPosition.opened.should.be.true;\n        });\n    });\n});\n//# sourceMappingURL=Field.test.js.map"]}
{"version":3,"sources":["../dist-esnext/Field.test.js"],"names":["a","Field","should","validFieldConfig","bombs","width","height","invalidFieldConfig","validPos","x","y","invalidPos","initialField","getInitialField","emptyField","getEmptyField","console","log","describe","be","an","it","skip","allPositions","map","p","isBomb","equal","length","bombedField","getBombedField","invalidField","not","exist","e","countedField","countNearBombs","flattenField","flatten","isBombeb","pos","bombedPos","find","nearBombebPos","validNearPos","nearBombs","above","closedPosition","newPos","openedPosition","openPosition","opened","true","nearPos","nearPositions","isValid","positionIsValid","false","validateFn","np","validatedpos"],"mappings":"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","file":"Field.test.js","sourcesContent":["import chai from 'chai';\nimport * as a from 'chai';\nimport R from 'ramda';\n// import { LogFile } from 'ptz-log-file';\nimport * as Field from './Field';\nconst should = a.should();\nchai.should();\n// import { IPosition } from './IPosition';\n// const log = LogFile({});'\nconst validFieldConfig = { bombs: 9, width: 9, height: 9 };\nconst invalidFieldConfig = { bombs: 27, width: 5, height: 5 };\nconst validPos = { x: 0, y: 0 };\nconst invalidPos = { x: -1, y: -1 };\nconst initialField = Field.getInitialField(validFieldConfig);\nconst emptyField = Field.getEmptyField(validFieldConfig);\nconsole.log(emptyField);\ndescribe('Field', () => {\n    describe('getEmptyField', () => {\n        emptyField.should.be.an('array');\n        it.skip('should have no bombs', () => {\n            let bombs = 0;\n            // console.log(emptyField);\n            Field.allPositions(emptyField).map(p => p.isBomb ? bombs++ : bombs);\n            bombs.should.be.equal(0);\n        });\n        it('should field size match fieldConfig size', () => {\n            emptyField.length.should.be.equal(validFieldConfig.width);\n            emptyField[0].length.should.be.equal(validFieldConfig.height);\n        });\n    });\n    describe('getBombedField', () => {\n        console.log(emptyField);\n        const bombedField = Field.getBombedField(emptyField, validFieldConfig);\n        console.log('after ----', emptyField);\n        bombedField.should.be.an('array');\n        it('should match bombs in the field with fieldConfig bombs', () => {\n            let bombs = 0;\n            Field.allPositions(bombedField).map(p => p.isBomb ? bombs++ : bombs);\n            bombs.should.be.equal(validFieldConfig.bombs);\n        });\n        it('should throw an error if bombs number is bigger than fild size', () => {\n            try {\n                const invalidField = Field.getInitialField(invalidFieldConfig);\n                should.not.exist(invalidField);\n            }\n            catch (e) {\n                e.should.be.an('error');\n            }\n        });\n    });\n    it('count near bombs', () => {\n        const countedField = Field.countNearBombs(initialField);\n        const flattenField = R.flatten(countedField);\n        const isBombeb = (pos) => pos.isBomb;\n        const bombedPos = R.find(isBombeb, flattenField);\n        const nearBombebPos = (pos) => Field.validNearPos(initialField, pos);\n        nearBombebPos(bombedPos).map(p => countedField[p.x][p.y].nearBombs.should.be.above(0));\n        countedField.should.be.an('array');\n    });\n    describe('openPosition', () => {\n        it('should return a opened position', () => {\n            const closedPosition = Field.newPos(1, 1);\n            const openedPosition = Field.openPosition(closedPosition);\n            // tslint:disable-next-line:no-unused-expression\n            openedPosition.opened.should.be.true;\n        });\n    });\n    describe('nearPositions', () => {\n        it('should return near positions', () => {\n            const nearPos = Field.nearPositions(validPos);\n            nearPos.should.be.an('array');\n        });\n    });\n    describe('positionIsValid', () => {\n        it('should return true if position is valid', () => {\n            const isValid = Field.positionIsValid(initialField, validPos);\n            // tslint:disable-next-line:no-unused-expression\n            isValid.should.be.true;\n        });\n        it('should return false if position is invalid', () => {\n            const isValid = Field.positionIsValid(initialField, invalidPos);\n            // tslint:disable-next-line:no-unused-expression\n            isValid.should.be.false;\n        });\n    });\n    describe('validNearPositions', () => {\n        it('should return only valid near positions', () => {\n            const nearPos = Field.validNearPos(initialField, validPos);\n            const validateFn = (np) => np.map(Field.positionIsValid(initialField));\n            const validatedpos = validateFn(nearPos);\n            validatedpos.map(p => p.should.be.true);\n            nearPos.should.be.an('array');\n        });\n    });\n});\n//# sourceMappingURL=Field.test.js.map"]}
{"version":3,"sources":["../dist-esnext/Field.test.js"],"names":["a","Field","should","before","validFieldConfig","bombs","width","height","invalidFieldConfig","validPos","x","y","invalidPos","initialField","getInitialField","emptyField","getEmptyField","emptyPositions","positions","console","log","describe","only","it","allPositions","map","p","isBomb","be","equal","length","bombedField","getBombedField","an","invalidField","not","exist","e","countedField","countNearBombs","flattenField","flatten","isBombeb","pos","bombedPos","find","nearBombebPos","validNearPos","nearBombs","above","closedPosition","newPos","clickedPosition","openPosition","opened","true","marked1Position","markPosition","nearPos","nearPositions","isValid","positionIsValid","false","validateFn","np","validatedpos","marked","marked2Position","marked3Position"],"mappings":"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","file":"Field.test.js","sourcesContent":["import chai from 'chai';\nimport * as a from 'chai';\nimport R from 'ramda';\nimport * as Field from './Field';\nconst should = a.should();\nchai.should();\nbefore('set test args', () => {\n    const validFieldConfig = { bombs: 9, width: 9, height: 9 };\n    const invalidFieldConfig = { bombs: 27, width: 5, height: 5 };\n    const validPos = { x: 0, y: 0 };\n    const invalidPos = { x: -1, y: -1 };\n    const initialField = Field.getInitialField(validFieldConfig);\n    const emptyField = Field.getEmptyField(validFieldConfig);\n    const emptyPositions = emptyField.positions;\n    console.log('emptyPositions', emptyPositions);\n    describe('Field', () => {\n        describe.only('getEmptyField', () => {\n            // emptyField.should.be.an('array');\n            // emptyPositions.should.be.an('array');\n            it('should have no bombs', () => {\n                let bombs = 0;\n                Field.allPositions(emptyPositions).map(p => p.isBomb ? bombs++ : bombs);\n                bombs.should.be.equal(0);\n            });\n            it('should field size match fieldConfig size', () => {\n                emptyPositions.length.should.be.equal(validFieldConfig.width);\n                emptyPositions[0].length.should.be.equal(validFieldConfig.height);\n            });\n        });\n        describe('getBombedField', () => {\n            const bombedField = Field.getBombedField(emptyField, validFieldConfig);\n            bombedField.should.be.an('array');\n            it('should match bombs in the field with fieldConfig bombs', () => {\n                let bombs = 0;\n                Field.allPositions(emptyPositions).map(p => p.isBomb ? bombs++ : bombs);\n                bombs.should.be.equal(validFieldConfig.bombs);\n            });\n            it('should throw an error if bombs number is bigger than fild size', () => {\n                try {\n                    const invalidField = Field.getInitialField(invalidFieldConfig);\n                    should.not.exist(invalidField);\n                }\n                catch (e) {\n                    e.should.be.an('error');\n                }\n            });\n        });\n        describe('countNearBombs', () => {\n            it('should increase near bombs', () => {\n                const countedField = Field.countNearBombs(initialField);\n                const flattenField = R.flatten(countedField.positions);\n                const isBombeb = (pos) => pos.isBomb;\n                const bombedPos = R.find(isBombeb, flattenField);\n                const nearBombebPos = (pos) => Field.validNearPos(initialField.positions, pos);\n                nearBombebPos(bombedPos).map(p => countedField[p.x][p.y].nearBombs.should.be.above(0));\n                countedField.should.be.an('array');\n            });\n        });\n        describe('openPosition', () => {\n            it('should return a opened position if not marked', () => {\n                const closedPosition = Field.newPos(1, 1);\n                const clickedPosition = Field.openPosition(closedPosition);\n                // tslint:disable-next-line:no-unused-expression\n                clickedPosition.opened.should.be.true;\n            });\n            it('should return a not opened position if marked', () => {\n                const closedPosition = Field.newPos(1, 1);\n                const marked1Position = Field.markPosition(closedPosition);\n                const clickedPosition = Field.markPosition(marked1Position);\n                // tslint:disable-next-line:no-unused-expression\n                clickedPosition.opened.should.be.not.true;\n            });\n        });\n        describe('nearPositions', () => {\n            it('should return near positions', () => {\n                const nearPos = Field.nearPositions(validPos);\n                nearPos.should.be.an('array');\n            });\n        });\n        describe('positionIsValid', () => {\n            it('should return true if position is valid', () => {\n                const isValid = Field.positionIsValid(initialField.positions, validPos);\n                // tslint:disable-next-line:no-unused-expression\n                isValid.should.be.true;\n            });\n            it('should return false if position is invalid', () => {\n                const isValid = Field.positionIsValid(initialField.positions, invalidPos);\n                // tslint:disable-next-line:no-unused-expression\n                isValid.should.be.false;\n            });\n        });\n        describe('validNearPositions', () => {\n            it('should return only valid near positions', () => {\n                const nearPos = Field.validNearPos(initialField.positions, validPos);\n                const validateFn = (np) => np.map(Field.positionIsValid(initialField.positions));\n                const validatedpos = validateFn(nearPos);\n                validatedpos.map(p => p.should.be.true);\n                nearPos.should.be.an('array');\n            });\n        });\n        describe('markPosition', () => {\n            const closedPosition = Field.newPos(-1, 1);\n            const marked1Position = Field.markPosition(closedPosition);\n            it('should return a marked as 1 position', () => {\n                marked1Position.marked.should.be.equal(1);\n            });\n            const marked2Position = Field.markPosition(marked1Position);\n            it('should return a marked as 2 position', () => {\n                marked2Position.marked.should.be.equal(2);\n            });\n            const marked3Position = Field.markPosition(marked2Position);\n            it('should return a unmarked position', () => {\n                marked3Position.marked.should.be.equal(0);\n            });\n        });\n    });\n});\n//# sourceMappingURL=Field.test.js.map"]}
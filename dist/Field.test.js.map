{"version":3,"sources":["../dist-esnext/Field.test.js"],"names":["a","Field","should","before","validFieldConfig","bombs","width","height","invalidFieldConfig","validPos","x","y","invalidPos","initialField","getInitialField","emptyField","getEmptyField","describe","be","an","it","allPositions","map","p","isBomb","equal","length","bombedField","getBombedField","invalidField","not","exist","e","countedField","countNearBombs","flattenField","flatten","isBombeb","pos","bombedPos","find","nearBombebPos","validNearPos","nearBombs","above","closedPosition","newPos","marked1Position","openPosition","opened","true","nearPos","nearPositions","isValid","positionIsValid","false","validateFn","np","validatedpos","markPosition","marked","marked2Position","marked3Position"],"mappings":"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","file":"Field.test.js","sourcesContent":["import chai from 'chai';\nimport * as a from 'chai';\nimport R from 'ramda';\nimport * as Field from './Field';\nconst should = a.should();\nchai.should();\nbefore('set test args', () => {\n    const validFieldConfig = { bombs: 9, width: 9, height: 9 };\n    const invalidFieldConfig = { bombs: 27, width: 5, height: 5 };\n    const validPos = { x: 0, y: 0 };\n    const invalidPos = { x: -1, y: -1 };\n    const initialField = Field.getInitialField(validFieldConfig);\n    const emptyField = Field.getEmptyField(validFieldConfig);\n    describe('Field', () => {\n        describe('getEmptyField', () => {\n            emptyField.should.be.an('array');\n            it('should have no bombs', () => {\n                let bombs = 0;\n                Field.allPositions(emptyField).map(p => p.isBomb ? bombs++ : bombs);\n                bombs.should.be.equal(0);\n            });\n            it('should field size match fieldConfig size', () => {\n                emptyField.length.should.be.equal(validFieldConfig.width);\n                emptyField[0].length.should.be.equal(validFieldConfig.height);\n            });\n        });\n        describe('getBombedField', () => {\n            const bombedField = Field.getBombedField(emptyField, validFieldConfig);\n            bombedField.should.be.an('array');\n            it('should match bombs in the field with fieldConfig bombs', () => {\n                let bombs = 0;\n                Field.allPositions(bombedField).map(p => p.isBomb ? bombs++ : bombs);\n                bombs.should.be.equal(validFieldConfig.bombs);\n            });\n            it('should throw an error if bombs number is bigger than fild size', () => {\n                try {\n                    const invalidField = Field.getInitialField(invalidFieldConfig);\n                    should.not.exist(invalidField);\n                }\n                catch (e) {\n                    e.should.be.an('error');\n                }\n            });\n        });\n        describe('countNearBombs', () => {\n            it('should increase near bombs', () => {\n                const countedField = Field.countNearBombs(initialField);\n                const flattenField = R.flatten(countedField);\n                const isBombeb = (pos) => pos.isBomb;\n                const bombedPos = R.find(isBombeb, flattenField);\n                const nearBombebPos = (pos) => Field.validNearPos(initialField, pos);\n                nearBombebPos(bombedPos).map(p => countedField[p.x][p.y].nearBombs.should.be.above(0));\n                countedField.should.be.an('array');\n            });\n        });\n        describe('openPosition', () => {\n            it('should return a opened position', () => {\n                const closedPosition = Field.newPos(1, 1);\n                const marked1Position = Field.openPosition(closedPosition);\n                // tslint:disable-next-line:no-unused-expression\n                marked1Position.opened.should.be.true;\n            });\n        });\n        describe('nearPositions', () => {\n            it('should return near positions', () => {\n                const nearPos = Field.nearPositions(validPos);\n                nearPos.should.be.an('array');\n            });\n        });\n        describe('positionIsValid', () => {\n            it('should return true if position is valid', () => {\n                const isValid = Field.positionIsValid(initialField, validPos);\n                // tslint:disable-next-line:no-unused-expression\n                isValid.should.be.true;\n            });\n            it('should return false if position is invalid', () => {\n                const isValid = Field.positionIsValid(initialField, invalidPos);\n                // tslint:disable-next-line:no-unused-expression\n                isValid.should.be.false;\n            });\n        });\n        describe('validNearPositions', () => {\n            it('should return only valid near positions', () => {\n                const nearPos = Field.validNearPos(initialField, validPos);\n                const validateFn = (np) => np.map(Field.positionIsValid(initialField));\n                const validatedpos = validateFn(nearPos);\n                validatedpos.map(p => p.should.be.true);\n                nearPos.should.be.an('array');\n            });\n        });\n        describe('markPosition', () => {\n            const closedPosition = Field.newPos(-1, 1);\n            const marked1Position = Field.markPosition(closedPosition);\n            it('should return a marked as 1 position', () => {\n                marked1Position.marked.should.be.equal(1);\n            });\n            const marked2Position = Field.markPosition(marked1Position);\n            it('should return a marked as 2 position', () => {\n                marked2Position.marked.should.be.equal(2);\n            });\n            const marked3Position = Field.markPosition(marked2Position);\n            it('should return a unmarked position', () => {\n                marked3Position.marked.should.be.equal(0);\n            });\n        });\n    });\n});\n//# sourceMappingURL=Field.test.js.map"]}
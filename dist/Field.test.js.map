{"version":3,"sources":["../dist-esnext/Field.test.js"],"names":["a","Field","should","describe","fieldConfig","initialField","validPos","x","y","beforeEach","bombs","width","height","getInitialField","be","an","it","allPositions","map","p","isBomb","equal","length","invalidFieldConfig","not","exist","e","countedField","countNearBombs","closedPosition","newPos","openedPosition","openPosition","opened","true","invalidPosition","nearPos","nearPositions","skip","positionIsValid","validNearPos","validateFn","np","curriedPositionIsValid","validatedpos"],"mappings":";;AAAA;;IACYA,C;;AAGZ;;IAAYC,K;;;;AACZ,IAAMC,SAASF,EAAEE,MAAF,EAAf;AAHA;AACA;;AAFYF,CAKZ,SAAKE,MAAL;AACA;AACA;AACAC,SAAS,iBAAT,EAA4B,YAAM;AAC9B,QAAIC,oBAAJ;AACA,QAAIC,qBAAJ;AACA,QAAMC,WAAW;AACbC,WAAG,CADU;AAEbC,WAAG;AAFU,KAAjB;AAIAC,eAAW,YAAM;AACbL,sBAAc;AACVM,mBAAO,CADG,EACAC,OAAO,CADP,EACUC,QAAQ;AADlB,SAAd;AAGAP,uBAAeJ,MAAMY,eAAN,CAAsBT,WAAtB,CAAf;AACAC,qBAAaH,MAAb,CAAoBY,EAApB,CAAuBC,EAAvB,CAA0B,OAA1B;AACH,KAND;AAOAZ,aAAS,OAAT,EAAkB,YAAM;AACpBa,WAAG,mDAAH,EAAwD,YAAM;AAC1D,gBAAIN,QAAQ,CAAZ;AACAT,kBAAMgB,YAAN,CAAmBZ,YAAnB,EAAiCa,GAAjC,CAAqC;AAAA,uBAAKC,EAAEC,MAAF,GAAWV,OAAX,GAAqBA,KAA1B;AAAA,aAArC;AACAA,kBAAMR,MAAN,CAAaY,EAAb,CAAgBO,KAAhB,CAAsBjB,YAAYM,KAAlC;AACH,SAJD;AAKAM,WAAG,0CAAH,EAA+C,YAAM;AACjDX,yBAAaiB,MAAb,CAAoBpB,MAApB,CAA2BY,EAA3B,CAA8BO,KAA9B,CAAoCjB,YAAYO,KAAhD;AACAN,yBAAa,CAAb,EAAgBiB,MAAhB,CAAuBpB,MAAvB,CAA8BY,EAA9B,CAAiCO,KAAjC,CAAuCjB,YAAYQ,MAAnD;AACH,SAHD;AAIAI,WAAG,gEAAH,EAAqE,YAAM;AACvE,gBAAI;AACA,oBAAMO,qBAAqB;AACvBb,2BAAO,EADgB,EACZC,OAAO,CADK,EACFC,QAAQ;AADN,iBAA3B;AAGAV,uBAAOsB,GAAP,CAAWC,KAAX,CAAiBpB,eAAeJ,MAAMY,eAAN,CAAsBU,kBAAtB,CAAhC;AACH,aALD,CAMA,OAAOG,CAAP,EAAU;AACNA,kBAAExB,MAAF,CAASY,EAAT,CAAYC,EAAZ,CAAe,OAAf;AACH;AACJ,SAVD;AAWAC,WAAG,kBAAH,EAAuB,YAAM;AACzBX,2BAAeJ,MAAMY,eAAN,CAAsBT,WAAtB,CAAf;AACA,gBAAMuB,eAAe1B,MAAM2B,cAAN,CAAqBvB,YAArB,CAArB;AACAsB,yBAAazB,MAAb,CAAoBY,EAApB,CAAuBC,EAAvB,CAA0B,OAA1B;AACH,SAJD;AAKH,KA1BD;AA2BAZ,aAAS,cAAT,EAAyB,YAAM;AAC3Ba,WAAG,iCAAH,EAAsC,YAAM;AACxC,gBAAMa,iBAAiB5B,MAAM6B,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACA,gBAAMC,iBAAiB9B,MAAM+B,YAAN,CAAmBH,cAAnB,CAAvB;AACA;AACAE,2BAAeE,MAAf,CAAsB/B,MAAtB,CAA6BY,EAA7B,CAAgCoB,IAAhC;AACH,SALD;AAMAlB,WAAG,iCAAH,EAAsC,YAAM;AACxC,gBAAMmB,kBAAkBlC,MAAM6B,MAAN,CAAa,CAAC,CAAd,EAAiB,CAAjB,CAAxB;AACA,gBAAMC,iBAAiB9B,MAAM+B,YAAN,CAAmBG,eAAnB,CAAvB;AACA;AACAJ,2BAAeE,MAAf,CAAsB/B,MAAtB,CAA6BY,EAA7B,CAAgCoB,IAAhC;AACH,SALD;AAMH,KAbD;AAcA/B,aAAS,eAAT,EAA0B,YAAM;AAC5Ba,WAAG,8BAAH,EAAmC,YAAM;AACrC,gBAAMoB,UAAUnC,MAAMoC,aAAN,CAAoB/B,QAApB,CAAhB;AACA8B,oBAAQlC,MAAR,CAAeY,EAAf,CAAkBC,EAAlB,CAAqB,OAArB;AACH,SAHD;AAIH,KALD;AAMAZ,aAASmC,IAAT,CAAc,iBAAd,EAAiC,YAAM;AACnCtB,WAAG,yCAAH,EAA8C,YAAM;AAChDf,kBAAMsC,eAAN,CAAsBlC,YAAtB,EAAoCC,QAApC;AACH,SAFD;AAGAU,WAAG,0CAAH,EAA+C,YAAM;AACjD;AACH,SAFD;AAGH,KAPD;AAQAb,aAAS,oBAAT,EAA+B,YAAM;AACjCa,WAAG,yCAAH,EAA8C,YAAM;AAChD,gBAAMoB,UAAUnC,MAAMuC,YAAN,CAAmBnC,YAAnB,EAAiCC,QAAjC,CAAhB;AACA,gBAAMmC,aAAa,SAAbA,UAAa,CAACC,EAAD;AAAA,uBAAQA,GAAGxB,GAAH,CAAOjB,MAAM0C,sBAAN,CAA6BtC,YAA7B,CAAP,CAAR;AAAA,aAAnB;AACA,gBAAMuC,eAAeH,WAAWL,OAAX,CAArB;AACAQ,yBAAa1B,GAAb,CAAiB;AAAA,uBAAKC,EAAEjB,MAAF,CAASY,EAAT,CAAYoB,IAAjB;AAAA,aAAjB;AACAE,oBAAQlC,MAAR,CAAeY,EAAf,CAAkBC,EAAlB,CAAqB,OAArB;AACH,SAND;AAOH,KARD;AASH,CA9ED;AA+EA","file":"Field.test.js","sourcesContent":["import chai from 'chai';\nimport * as a from 'chai';\n// import R from 'ramda';\n// import { LogFile } from 'ptz-log-file';\nimport * as Field from './Field';\nconst should = a.should();\nchai.should();\n// import { IPosition } from './IPosition';\n// const log = LogFile({});\ndescribe('getInitialField', () => {\n    let fieldConfig;\n    let initialField;\n    const validPos = {\n        x: 0,\n        y: 0\n    };\n    beforeEach(() => {\n        fieldConfig = {\n            bombs: 9, width: 9, height: 9\n        };\n        initialField = Field.getInitialField(fieldConfig);\n        initialField.should.be.an('array');\n    });\n    describe('Field', () => {\n        it('bombs in the field should match fieldConfig bombs', () => {\n            var bombs = 0;\n            Field.allPositions(initialField).map(p => p.isBomb ? bombs++ : bombs);\n            bombs.should.be.equal(fieldConfig.bombs);\n        });\n        it('should field size match fieldConfig size', () => {\n            initialField.length.should.be.equal(fieldConfig.width);\n            initialField[0].length.should.be.equal(fieldConfig.height);\n        });\n        it('should throw an error if bombs number is bigger than fild size', () => {\n            try {\n                const invalidFieldConfig = {\n                    bombs: 27, width: 5, height: 5\n                };\n                should.not.exist(initialField = Field.getInitialField(invalidFieldConfig));\n            }\n            catch (e) {\n                e.should.be.an('error');\n            }\n        });\n        it('count near bombs', () => {\n            initialField = Field.getInitialField(fieldConfig);\n            const countedField = Field.countNearBombs(initialField);\n            countedField.should.be.an('array');\n        });\n    });\n    describe('openPosition', () => {\n        it('should return a opened position', () => {\n            const closedPosition = Field.newPos(1, 1);\n            const openedPosition = Field.openPosition(closedPosition);\n            // tslint:disable-next-line:no-unused-expression\n            openedPosition.opened.should.be.true;\n        });\n        it('should return a opened position', () => {\n            const invalidPosition = Field.newPos(-1, 1);\n            const openedPosition = Field.openPosition(invalidPosition);\n            // tslint:disable-next-line:no-unused-expression\n            openedPosition.opened.should.be.true;\n        });\n    });\n    describe('nearPositions', () => {\n        it('should return near positions', () => {\n            const nearPos = Field.nearPositions(validPos);\n            nearPos.should.be.an('array');\n        });\n    });\n    describe.skip('positionIsValid', () => {\n        it('should return true if position is valid', () => {\n            Field.positionIsValid(initialField, validPos);\n        });\n        it('should return false if position is valid', () => {\n            //\n        });\n    });\n    describe('validNearPositions', () => {\n        it('should return only valid near positions', () => {\n            const nearPos = Field.validNearPos(initialField, validPos);\n            const validateFn = (np) => np.map(Field.curriedPositionIsValid(initialField));\n            const validatedpos = validateFn(nearPos);\n            validatedpos.map(p => p.should.be.true);\n            nearPos.should.be.an('array');\n        });\n    });\n});\n//# sourceMappingURL=Field.test.js.map"]}
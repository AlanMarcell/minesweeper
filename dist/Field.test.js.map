{"version":3,"sources":["../dist-esnext/Field.test.js"],"names":["a","Field","should","before","validFieldConfig","bombs","width","height","invalidFieldConfig","validPos","x","y","invalidPos","initialField","getInitialField","emptyField","getEmptyField","describe","be","an","it","allPositions","map","p","isBomb","equal","length","bombedField","getBombedField","invalidField","not","exist","e","countedField","countNearBombs","flattenField","flatten","isBombeb","pos","bombedPos","find","nearBombebPos","validNearPos","nearBombs","above","closedPosition","newPos","clickedPosition","openPosition","opened","true","marked1Position","markPosition","nearPos","nearPositions","isValid","positionIsValid","false","validateFn","np","validatedpos","marked","marked2Position","marked3Position"],"mappings":"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","file":"Field.test.js","sourcesContent":["import chai from 'chai';\r\nimport * as a from 'chai';\r\nimport R from 'ramda';\r\nimport * as Field from './Field';\r\nconst should = a.should();\r\nchai.should();\r\nbefore('set test args', () => {\r\n    const validFieldConfig = { bombs: 9, width: 9, height: 9 };\r\n    const invalidFieldConfig = { bombs: 27, width: 5, height: 5 };\r\n    const validPos = { x: 0, y: 0 };\r\n    const invalidPos = { x: -1, y: -1 };\r\n    const initialField = Field.getInitialField(validFieldConfig);\r\n    const emptyField = Field.getEmptyField(validFieldConfig);\r\n    describe('Field', () => {\r\n        describe('getEmptyField', () => {\r\n            emptyField.should.be.an('array');\r\n            it('should have no bombs', () => {\r\n                let bombs = 0;\r\n                Field.allPositions(emptyField).map(p => p.isBomb ? bombs++ : bombs);\r\n                bombs.should.be.equal(0);\r\n            });\r\n            it('should field size match fieldConfig size', () => {\r\n                emptyField.length.should.be.equal(validFieldConfig.width);\r\n                emptyField[0].length.should.be.equal(validFieldConfig.height);\r\n            });\r\n        });\r\n        describe('getBombedField', () => {\r\n            const bombedField = Field.getBombedField(emptyField, validFieldConfig);\r\n            bombedField.should.be.an('array');\r\n            it('should match bombs in the field with fieldConfig bombs', () => {\r\n                let bombs = 0;\r\n                Field.allPositions(bombedField).map(p => p.isBomb ? bombs++ : bombs);\r\n                bombs.should.be.equal(validFieldConfig.bombs);\r\n            });\r\n            it('should throw an error if bombs number is bigger than fild size', () => {\r\n                try {\r\n                    const invalidField = Field.getInitialField(invalidFieldConfig);\r\n                    should.not.exist(invalidField);\r\n                }\r\n                catch (e) {\r\n                    e.should.be.an('error');\r\n                }\r\n            });\r\n        });\r\n        describe('countNearBombs', () => {\r\n            it('should increase near bombs', () => {\r\n                const countedField = Field.countNearBombs(initialField);\r\n                const flattenField = R.flatten(countedField);\r\n                const isBombeb = (pos) => pos.isBomb;\r\n                const bombedPos = R.find(isBombeb, flattenField);\r\n                const nearBombebPos = (pos) => Field.validNearPos(initialField, pos);\r\n                nearBombebPos(bombedPos).map(p => countedField[p.x][p.y].nearBombs.should.be.above(0));\r\n                countedField.should.be.an('array');\r\n            });\r\n        });\r\n        describe('openPosition', () => {\r\n            it('should return a opened position if not marked', () => {\r\n                const closedPosition = Field.newPos(1, 1);\r\n                const clickedPosition = Field.openPosition(closedPosition);\r\n                // tslint:disable-next-line:no-unused-expression\r\n                clickedPosition.opened.should.be.true;\r\n            });\r\n            it('should return a not opened position if marked', () => {\r\n                const closedPosition = Field.newPos(1, 1);\r\n                const marked1Position = Field.markPosition(closedPosition);\r\n                const clickedPosition = Field.markPosition(marked1Position);\r\n                // tslint:disable-next-line:no-unused-expression\r\n                clickedPosition.opened.should.be.not.true;\r\n            });\r\n        });\r\n        describe('nearPositions', () => {\r\n            it('should return near positions', () => {\r\n                const nearPos = Field.nearPositions(validPos);\r\n                nearPos.should.be.an('array');\r\n            });\r\n        });\r\n        describe('positionIsValid', () => {\r\n            it('should return true if position is valid', () => {\r\n                const isValid = Field.positionIsValid(initialField, validPos);\r\n                // tslint:disable-next-line:no-unused-expression\r\n                isValid.should.be.true;\r\n            });\r\n            it('should return false if position is invalid', () => {\r\n                const isValid = Field.positionIsValid(initialField, invalidPos);\r\n                // tslint:disable-next-line:no-unused-expression\r\n                isValid.should.be.false;\r\n            });\r\n        });\r\n        describe('validNearPositions', () => {\r\n            it('should return only valid near positions', () => {\r\n                const nearPos = Field.validNearPos(initialField, validPos);\r\n                const validateFn = (np) => np.map(Field.positionIsValid(initialField));\r\n                const validatedpos = validateFn(nearPos);\r\n                validatedpos.map(p => p.should.be.true);\r\n                nearPos.should.be.an('array');\r\n            });\r\n        });\r\n        describe('markPosition', () => {\r\n            const closedPosition = Field.newPos(-1, 1);\r\n            const marked1Position = Field.markPosition(closedPosition);\r\n            it('should return a marked as 1 position', () => {\r\n                marked1Position.marked.should.be.equal(1);\r\n            });\r\n            const marked2Position = Field.markPosition(marked1Position);\r\n            it('should return a marked as 2 position', () => {\r\n                marked2Position.marked.should.be.equal(2);\r\n            });\r\n            const marked3Position = Field.markPosition(marked2Position);\r\n            it('should return a unmarked position', () => {\r\n                marked3Position.marked.should.be.equal(0);\r\n            });\r\n        });\r\n    });\r\n});\r\n//# sourceMappingURL=Field.test.js.map"]}
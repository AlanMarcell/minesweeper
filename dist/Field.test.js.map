{"version":3,"sources":["../dist-esnext/Field.test.js"],"names":["c","Field","should","shouldBeImuttable","a","b","not","be","equal","before","validFieldConfig","bombs","width","height","invalidFieldConfig","validPos","x","y","invalidPos","initialField","getInitialField","emptyField","getEmptyField","describe","an","it","allPositions","map","p","isBomb","length","bombedField","getBombedField","invalidField","exist","e","countedField","countNearBombs","flattenField","flatten","isBombeb","pos","bombedPos","find","nearBombebPos","validNearPos","nearBombs","above","closedPosition","newPos","clickedPosition","openPosition","opened","true","markedPosition","markPosition","nearPos","nearPositions","isValid","positionIsValid","false","validateFn","np","validatedpos","marked1Position","marked","marked2Position","marked3Position","randomPos","getRandomPos"],"mappings":"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","file":"Field.test.js","sourcesContent":["import chai from 'chai';\nimport * as c from 'chai';\nimport R from 'ramda';\nimport * as Field from './Field';\nconst should = c.should();\nchai.should();\nconst shouldBeImuttable = (a, b) => a.should.not.be.equal(b);\nbefore('set test args', () => {\n    const validFieldConfig = { bombs: 9, width: 9, height: 9 };\n    const invalidFieldConfig = { bombs: 27, width: 5, height: 5 };\n    const validPos = { x: 0, y: 0 };\n    const invalidPos = { x: -1, y: -1 };\n    const initialField = Field.getInitialField(validFieldConfig);\n    const emptyField = Field.getEmptyField(validFieldConfig);\n    describe('Field', () => {\n        describe('getEmptyField', () => {\n            emptyField.should.be.an('array');\n            it('should have no bombs', () => {\n                let bombs = 0;\n                Field.allPositions(emptyField).map(p => p.isBomb ? bombs++ : bombs);\n                bombs.should.be.equal(0);\n            });\n            it('should field size match fieldConfig size', () => {\n                emptyField.length.should.be.equal(validFieldConfig.width);\n                emptyField[0].length.should.be.equal(validFieldConfig.height);\n            });\n        });\n        describe('getBombedField', () => {\n            const bombedField = Field.getBombedField(emptyField, validFieldConfig);\n            it('should be immutable', () => {\n                bombedField.should.be.an('array');\n                shouldBeImuttable(bombedField, emptyField);\n            });\n            it('should match bombs in the field with fieldConfig bombs', () => {\n                let bombs = 0;\n                Field.allPositions(bombedField).map(p => p.isBomb ? bombs++ : bombs);\n                bombs.should.be.equal(validFieldConfig.bombs);\n            });\n            it('should throw an error if bombs number is bigger than fild size', () => {\n                try {\n                    const invalidField = Field.getInitialField(invalidFieldConfig);\n                    should.not.exist(invalidField);\n                }\n                catch (e) {\n                    e.should.be.an('error');\n                }\n            });\n        });\n        describe('countNearBombs', () => {\n            const countedField = Field.countNearBombs(initialField);\n            const flattenField = R.flatten(countedField);\n            it('should be immutable', () => {\n                shouldBeImuttable(countedField, initialField);\n            });\n            it('should increase near bombs', () => {\n                const isBombeb = (pos) => pos.isBomb;\n                const bombedPos = R.find(isBombeb, flattenField);\n                const nearBombebPos = (pos) => Field.validNearPos(initialField, pos);\n                nearBombebPos(bombedPos).map(p => countedField[p.x][p.y].nearBombs.should.be.above(0));\n                countedField.should.be.an('array');\n            });\n        });\n        describe('openPosition', () => {\n            it('should be immutable', () => {\n                const closedPosition = Field.newPos(1, 1);\n                const clickedPosition = Field.openPosition(closedPosition);\n                shouldBeImuttable(closedPosition, clickedPosition);\n            });\n            it('should return a opened position if not marked', () => {\n                const closedPosition = Field.newPos(1, 1);\n                const clickedPosition = Field.openPosition(closedPosition);\n                // tslint:disable-next-line:no-unused-expression\n                clickedPosition.opened.should.be.true;\n            });\n            it('should return a not opened position if marked', () => {\n                const closedPosition = Field.newPos(1, 1);\n                const markedPosition = Field.markPosition(closedPosition);\n                const clickedPosition = Field.openPosition(markedPosition);\n                // tslint:disable-next-line:no-unused-expression\n                clickedPosition.opened.should.be.not.true;\n            });\n        });\n        describe('nearPositions', () => {\n            it('should return near positions', () => {\n                const nearPos = Field.nearPositions(validPos);\n                nearPos.length.should.be.equal(8);\n                nearPos.should.be.an('array');\n            });\n        });\n        describe('positionIsValid', () => {\n            it('should return true if position is valid', () => {\n                const isValid = Field.positionIsValid(initialField, validPos);\n                // tslint:disable-next-line:no-unused-expression\n                isValid.should.be.true;\n            });\n            it('should return false if position is invalid', () => {\n                const isValid = Field.positionIsValid(initialField, invalidPos);\n                // tslint:disable-next-line:no-unused-expression\n                isValid.should.be.false;\n            });\n        });\n        describe('validNearPositions', () => {\n            it('should return only valid near positions', () => {\n                const nearPos = Field.validNearPos(initialField, validPos);\n                const validateFn = (np) => np.map(Field.positionIsValid(initialField));\n                const validatedpos = validateFn(nearPos);\n                validatedpos.map(p => p.should.be.true);\n                nearPos.should.be.an('array');\n            });\n        });\n        describe('markPosition', () => {\n            const closedPosition = Field.newPos(1, 1);\n            const marked1Position = Field.markPosition(closedPosition);\n            it('should be immutable', () => {\n                shouldBeImuttable(closedPosition, marked1Position);\n            });\n            it('should return a marked as 1 position', () => {\n                marked1Position.marked.should.be.equal(1);\n            });\n            const marked2Position = Field.markPosition(marked1Position);\n            it('should return a marked as 2 position', () => {\n                marked2Position.marked.should.be.equal(2);\n            });\n            const marked3Position = Field.markPosition(marked2Position);\n            it('should return a unmarked position', () => {\n                marked3Position.marked.should.be.equal(0);\n            });\n        });\n        describe('getRandomPos', () => {\n            it('should return a valid position', () => {\n                const randomPos = Field.getRandomPos(initialField, validFieldConfig);\n                // tslint:disable-next-line:no-unused-expression\n                Field.positionIsValid(initialField, randomPos).should.be.true;\n            });\n        });\n    });\n});\n//# sourceMappingURL=Field.test.js.map"]}
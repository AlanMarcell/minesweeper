{"version":3,"sources":["../dist-esnext/Field.js"],"names":["nearPositions","pos","range","arrayPos","remove","map","x","i","y","j","reduce","a","b","concat","openPosition","opened","isValidConfig","fieldConfig","totalPositions","width","height","bombs","allPositions","field","countNearBombs","countedField","isBomb","p","nearBombs","getRandomPos","Math","floor","random","getBombs","getEmptyField","widthRange","heightRange","newPos","marked","isValid","getInitialField","Error","emptyField","bombedField","logField","indexColor","resetColor","firstLine","f","index","console","log","row","col","colIndex","line","numBombs","numBombsString"],"mappings":"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","file":"Field.js","sourcesContent":["import R from 'ramda';\n/**\n * Receives a pos and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    const arrayPos = R.remove(4, 1, range.map(i => range.map(j => {\n        return { x: pos.x + i, y: pos.y + j };\n    })));\n    return arrayPos.reduce((a, b) => a.concat(b));\n};\nconst openPosition = (pos) => {\n    pos.opened = true;\n    return pos;\n};\nfunction isValidConfig(fieldConfig) {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n}\nconst allPositions = (field) => field.reduce((a, b) => a.concat(b));\nfunction countNearBombs(field) {\n    const countedField = field;\n    allPositions(field).map(pos => {\n        if (pos.isBomb)\n            nearPositions(pos).map(p => {\n                if (countedField[p.x] && countedField[p.x][p.y])\n                    countedField[p.x][p.y].nearBombs++;\n            });\n    });\n    return countedField;\n}\nconst getRandomPos = (field, fieldConfig) => {\n    const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n    const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n    return field[width][height];\n};\n/**\n * Populate new field with bombs\n */\nconst getBombs = (field, fieldConfig) => {\n    for (let i = 0; i < fieldConfig.bombs; i++) {\n        const pos = getRandomPos(field, fieldConfig);\n        if (pos && pos.isBomb)\n            i--;\n        pos.isBomb = true;\n    }\n    return field;\n};\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return widthRange.map(i => heightRange.map(j => newPos(i, j)));\n};\n/**\n * Get a new position\n */\nconst newPos = (i, j) => {\n    return {\n        x: i, y: j, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nfunction getInitialField(fieldConfig) {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombs(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n}\nfunction logField(field) {\n    const countedField = field;\n    const indexColor = '\\x1b[37m';\n    const resetColor = '\\x1b[0m';\n    let firstLine = '    ';\n    field.map((f, index) => firstLine += ' ' + (index + 1) + '  ');\n    console.log(indexColor + firstLine + resetColor);\n    let row;\n    field.map((col, colIndex) => {\n        var line = '|';\n        row = '   ';\n        col.map((pos, index) => {\n            if (index === 0 && colIndex === 0)\n                line = line;\n            if (index === 0)\n                line = ' ' + indexColor + (colIndex + 1) + resetColor + ' |';\n            if (countedField[pos.x][pos.y].opened) {\n                if (countedField[pos.x][pos.y].isBomb) {\n                    line += '\\x1b[31m * ' + resetColor;\n                    row += '---';\n                }\n                else {\n                    const numBombs = countedField[pos.x][pos.y].nearBombs;\n                    let numBombsString;\n                    switch (numBombs) {\n                        case 1:\n                            numBombsString = '\\x1b[34m' + numBombs;\n                            break;\n                        case 2:\n                            numBombsString = '\\x1b[32m' + numBombs;\n                            break;\n                        case 3:\n                            numBombsString = '\\x1b[33m' + numBombs;\n                            break;\n                        case 4:\n                            numBombsString = '\\x1b[35m' + numBombs;\n                            break;\n                        case 5:\n                            numBombsString = '\\x1b[36m' + numBombs;\n                            break;\n                        case 7:\n                            numBombsString = '\\x1b[31m' + numBombs;\n                            break;\n                        case 8:\n                            numBombsString = '\\x1b[37m' + numBombs;\n                            break;\n                        default:\n                            numBombsString = ' ';\n                    }\n                    line += ' ' + numBombsString + resetColor + ' ';\n                    row += '---';\n                }\n            }\n            else {\n                line += '   ';\n                row += '---';\n            }\n            line += '|';\n            row += '-';\n        });\n        console.log(row);\n        console.log(line);\n    });\n    console.log(row + '\\n');\n}\nexport { getInitialField, countNearBombs, logField, nearPositions, newPos, openPosition };\n//# sourceMappingURL=Field.js.map"]}
{"version":3,"sources":["../dist-esnext/Field.js"],"names":["positionIsValid","curry","positions","p","x","length","y","nearPositions","pos","range","flatten","remove","map","i","j","validNearPos","position","filter","openPosition","oldPosition","openedPos","updatePos","marked","opened","markPosition","markedPos","isValidConfig","fieldConfig","totalPositions","width","height","bombs","countNearBombs","field","countedField","isBomb","nearBombs","getRandomPos","Math","floor","random","bombPos","config","getBombedField","fieldToBomb","clone","last","getEmptyField","widthRange","heightRange","newPos","isValid","getInitialField","Error","emptyField","bombedField","allPositions"],"mappings":"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","file":"Field.js","sourcesContent":["import R from 'ramda';\nimport { allPositions } from './Position';\n/**\n * Checks if field has position.\n */\nconst positionIsValid = R.curry((positions, p) => p && p.x >= 0\n    && p.x < positions.length\n    && p.y >= 0\n    && p.y < positions[0].length);\n/**\n * Receives a pos and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    return R.flatten(R.remove(4, 1, range.map(i => range.map(j => {\n        return { x: pos.x + i, y: pos.y + j };\n    }))));\n};\nconst validNearPos = R.curry((position, pos) => R.filter(positionIsValid(position), nearPositions(pos)));\nconst openPosition = (oldPosition) => {\n    const openedPos = updatePos(oldPosition);\n    if (openedPos.marked !== 0)\n        return openedPos;\n    openedPos.opened = true;\n    return openedPos;\n};\nconst markPosition = (oldPosition) => {\n    const markedPos = updatePos(oldPosition);\n    markedPos.marked === 2\n        ? markedPos.marked = 0\n        : markedPos.marked++;\n    return markedPos;\n};\nconst isValidConfig = (fieldConfig) => {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n};\nconst countNearBombs = (field) => {\n    const countedField = field;\n    allPositions(field.positions).map(pos => {\n        if (pos.isBomb)\n            validNearPos(field.positions, pos).map(p => countedField.positions[p.x][p.y].nearBombs++);\n    }); // TODO immutable\n    return countedField;\n};\n// TODO use ptz-math and help with any math method you need\nconst getRandomPos = (positions, fieldConfig) => {\n    const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n    const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n    return positions[width][height];\n};\nconst bombPos = (field, config) => {\n    const pos = getRandomPos(field.positions, config);\n    if (pos.isBomb) {\n        return bombPos(field, config);\n    }\n    pos.isBomb = true;\n    return field;\n};\n/**\n * Populate new field with bombs\n */\nconst getBombedField = (field, config) => {\n    const fieldToBomb = R.clone(field);\n    return R.last(R.range(0, config.bombs).map(() => bombPos(fieldToBomb, config)));\n};\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return {\n        positions: widthRange.map(i => heightRange.map(j => newPos(i, j))),\n        fieldConfig\n    };\n};\n/**\n * Get a new position\n */\nconst newPos = (x, y) => {\n    return {\n        x, y, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nconst updatePos = (pos) => R.clone(pos);\nconst getInitialField = (fieldConfig) => {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombedField(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n};\nexport { allPositions, getInitialField, getEmptyField, getBombedField, countNearBombs, markPosition, nearPositions, newPos, openPosition, positionIsValid, validNearPos, updatePos };\n//# sourceMappingURL=Field.js.map"]}
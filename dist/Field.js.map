{"version":3,"sources":["../dist-esnext/Field.js"],"names":["positionIsValid","curry","field","position","x","length","y","nearPositions","pos","range","arrayPos","remove","map","p","i","j","reduce","a","b","concat","validNearPos","filter","curriedValidNearPos","openPosition","opened","isValidConfig","fieldConfig","totalPositions","width","height","bombs","allPositions","countNearBombs","countedField","isBomb","nearBombs","getRandomPos","Math","floor","random","getBombs","getEmptyField","widthRange","heightRange","newPos","marked","isValid","getInitialField","Error","emptyField","bombedField","logField","indexColor","resetColor","firstLine","f","index","console","log","row","col","colIndex","line","numBombs","numBombsString"],"mappings":"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","file":"Field.js","sourcesContent":["import R from 'ramda';\nconst positionIsValid = R.curry((field, position) => {\n    return position.x >= 0 && position.x < field.length && position.y >= 0 && position.y < field[0].length;\n});\n/**\n * Receives a pos and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    const arrayPos = R.remove(4, 1, range.map(i => range.map(j => {\n        const p = { x: pos.x + i, y: pos.y + j };\n        return p;\n    })));\n    return arrayPos.reduce((a, b) => a.concat(b));\n};\nconst validNearPos = (field, pos) => R.filter(positionIsValid(field), nearPositions(pos));\nconst curriedValidNearPos = R.curry(validNearPos);\nconst openPosition = (pos) => {\n    pos.opened = true;\n    return pos;\n};\nfunction isValidConfig(fieldConfig) {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n}\nconst allPositions = (field) => field.reduce((a, b) => a.concat(b));\nfunction countNearBombs(field) {\n    const countedField = field;\n    allPositions(field).map(pos => {\n        if (pos.isBomb)\n            validNearPos(field, pos).map(p => countedField[p.x][p.y].nearBombs++);\n    });\n    return countedField;\n}\nconst getRandomPos = (field, fieldConfig) => {\n    const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n    const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n    return field[width][height];\n};\n/**\n * Populate new field with bombs\n */\nconst getBombs = (field, fieldConfig) => {\n    for (let i = 0; i < fieldConfig.bombs; i++) {\n        const pos = getRandomPos(field, fieldConfig);\n        if (pos && pos.isBomb)\n            i--;\n        pos.isBomb = true;\n    }\n    return field;\n};\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return widthRange.map(i => heightRange.map(j => newPos(i, j)));\n};\n/**\n * Get a new position\n */\nconst newPos = (i, j) => {\n    return {\n        x: i, y: j, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nfunction getInitialField(fieldConfig) {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombs(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n}\nfunction logField(field) {\n    const countedField = field;\n    const indexColor = '\\x1b[37m';\n    const resetColor = '\\x1b[0m';\n    let firstLine = '    ';\n    field.map((f, index) => firstLine += ' ' + (index + 1) + '  ');\n    console.log(indexColor + firstLine + resetColor);\n    let row;\n    field.map((col, colIndex) => {\n        var line = '|';\n        row = '   ';\n        col.map((pos, index) => {\n            if (index === 0 && colIndex === 0)\n                line = line;\n            if (index === 0)\n                line = ' ' + indexColor + (colIndex + 1) + resetColor + ' |';\n            if (countedField[pos.x][pos.y].opened) {\n                if (countedField[pos.x][pos.y].isBomb) {\n                    line += '\\x1b[31m * ' + resetColor;\n                    row += '---';\n                }\n                else {\n                    const numBombs = countedField[pos.x][pos.y].nearBombs;\n                    let numBombsString;\n                    switch (numBombs) {\n                        case 1:\n                            numBombsString = '\\x1b[34m' + numBombs;\n                            break;\n                        case 2:\n                            numBombsString = '\\x1b[32m' + numBombs;\n                            break;\n                        case 3:\n                            numBombsString = '\\x1b[33m' + numBombs;\n                            break;\n                        case 4:\n                            numBombsString = '\\x1b[35m' + numBombs;\n                            break;\n                        case 5:\n                            numBombsString = '\\x1b[36m' + numBombs;\n                            break;\n                        case 7:\n                            numBombsString = '\\x1b[31m' + numBombs;\n                            break;\n                        case 8:\n                            numBombsString = '\\x1b[37m' + numBombs;\n                            break;\n                        default:\n                            numBombsString = ' ';\n                    }\n                    line += ' ' + numBombsString + resetColor + ' ';\n                    row += '---';\n                }\n            }\n            else {\n                line += '   ';\n                row += '---';\n            }\n            line += '|';\n            row += '-';\n        });\n        console.log(row);\n        console.log(line);\n    });\n    console.log(row + '\\n');\n}\nexport { getInitialField, countNearBombs, logField, nearPositions, newPos, openPosition, positionIsValid, curriedValidNearPos, validNearPos, allPositions };\n//# sourceMappingURL=Field.js.map"]}
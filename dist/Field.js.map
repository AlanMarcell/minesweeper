{"version":3,"sources":["../dist-esnext/Field.js"],"names":["positionIsValid","curry","field","p","x","length","y","nearPositions","pos","range","remove","flatten","map","i","j","validNearPos","filter","openPosition","openedPos","clone","marked","opened","markPosition","markedPos","updatePos","isValidConfig","fieldConfig","totalPositions","width","height","bombs","allPositions","reduce","a","b","concat","countNearBombs","countedField","isBomb","nearBombs","getRandomPos","Math","floor","random","bombPos","config","getBombedField","fieldToBomb","last","getEmptyField","widthRange","heightRange","newPos","isValid","getInitialField","Error","emptyField","bombedField"],"mappings":";;;;;;;AAAA;;;;;;AACA;;;AAGA,MAAMA,kBAAkB,gBAAEC,KAAF,CAAQ,CAACC,KAAD,EAAQC,CAAR,KAAc;AAC1C,WAAOA,KAAKA,EAAEC,CAAF,IAAO,CAAZ,IAAiBD,EAAEC,CAAF,GAAMF,MAAMG,MAA7B,IAAuCF,EAAEG,CAAF,IAAO,CAA9C,IAAmDH,EAAEG,CAAF,GAAMJ,MAAM,CAAN,EAASG,MAAzE;AACH,CAFuB,CAAxB;AAGA;;;;;AAKA,MAAME,gBAAiBC,GAAD,IAAS;AAC3B,UAAMC,QAAQ,gBAAEA,KAAF,CAAQ,CAAC,CAAT,EAAY,CAAZ,CAAd;AACA;;;AAGA,WAAO,gBAAEC,MAAF,CAAS,CAAT,EAAY,CAAZ,EAAe,gBAAEC,OAAF,CAAUF,MAAMG,GAAN,CAAUC,KAAKJ,MAAMG,GAAN,CAAUE,KAAK;AAC1D,eAAO,EAAEV,GAAGI,IAAIJ,CAAJ,GAAQS,CAAb,EAAgBP,GAAGE,IAAIF,CAAJ,GAAQQ,CAA3B,EAAP;AACH,KAF8C,CAAf,CAAV,CAAf,CAAP;AAGH,CARD;AASA,MAAMC,eAAe,gBAAEd,KAAF,CAAQ,CAACC,KAAD,EAAQM,GAAR,KAAgB,gBAAEQ,MAAF,CAAShB,gBAAgBE,KAAhB,CAAT,EAAiCK,cAAcC,GAAd,CAAjC,CAAxB,CAArB;AACA,MAAMS,eAAgBT,GAAD,IAAS;AAC1B,UAAMU,YAAY,gBAAEC,KAAF,CAAQX,GAAR,CAAlB;AACA,QAAIU,UAAUE,MAAV,KAAqB,CAAzB,EACI,OAAOF,SAAP;AACJA,cAAUG,MAAV,GAAmB,IAAnB;AACA,WAAOH,SAAP;AACH,CAND;AAOA,MAAMI,eAAgBd,GAAD,IAAS;AAC1B,UAAMe,YAAYC,UAAUhB,GAAV,CAAlB;AACA,QAAIe,UAAUH,MAAV,KAAqB,CAAzB,EACIG,UAAUH,MAAV,GAAmB,CAAnB,CADJ,KAGIG,UAAUH,MAAV;AACJ,WAAOG,SAAP;AACH,CAPD;AAQA,MAAME,gBAAiBC,WAAD,IAAiB;AACnC,UAAMC,iBAAiBD,YAAYE,KAAZ,GAAoBF,YAAYG,MAAvD;AACA,WAAOF,iBAAiBD,YAAYI,KAA7B,GAAqC,IAArC,GAA4C,KAAnD;AACH,CAHD;AAIA,MAAMC,eAAgB7B,KAAD,IAAWA,MAAM8B,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,EAAEE,MAAF,CAASD,CAAT,CAAvB,CAAhC;AACA,MAAME,iBAAkBlC,KAAD,IAAW;AAC9B,UAAMmC,eAAe,gBAAElB,KAAF,CAAQjB,KAAR,CAArB;AACA6B,iBAAa7B,KAAb,EAAoBU,GAApB,CAAwBJ,OAAO;AAC3B,YAAIA,IAAI8B,MAAR,EACIvB,aAAasB,YAAb,EAA2B7B,GAA3B,EAAgCI,GAAhC,CAAoCT,KAAKkC,aAAalC,EAAEC,CAAf,EAAkBD,EAAEG,CAApB,EAAuBiC,SAAvB,EAAzC;AACP,KAHD,EAF8B,CAK1B;AACJ,WAAOF,YAAP;AACH,CAPD;AAQA;AACA,MAAMG,eAAe,CAACtC,KAAD,EAAQwB,WAAR,KAAwB;AACzC,UAAME,QAAQa,KAAKC,KAAL,CAAW,CAAChB,YAAYE,KAAZ,GAAoB,CAArB,IAA0Ba,KAAKE,MAAL,EAA1B,GAA0C,CAArD,CAAd;AACA,UAAMd,SAASY,KAAKC,KAAL,CAAW,CAAChB,YAAYG,MAAZ,GAAqB,CAAtB,IAA2BY,KAAKE,MAAL,EAA3B,GAA2C,CAAtD,CAAf;AACA,WAAOzC,MAAM0B,KAAN,EAAaC,MAAb,CAAP;AACH,CAJD;AAKA,MAAMe,UAAU,CAAC1C,KAAD,EAAQ2C,MAAR,KAAmB;AAC/B,UAAMrC,MAAMgC,aAAatC,KAAb,EAAoB2C,MAApB,CAAZ;AACA,QAAIrC,IAAI8B,MAAR,EAAgB;AACZ,eAAOM,QAAQ1C,KAAR,EAAe2C,MAAf,CAAP;AACH;AACDrC,QAAI8B,MAAJ,GAAa,IAAb;AACA,WAAOpC,KAAP;AACH,CAPD;AAQA;;;AAGA,MAAM4C,iBAAiB,CAAC5C,KAAD,EAAQ2C,MAAR,KAAmB;AACtC,UAAME,cAAc,gBAAE5B,KAAF,CAAQjB,KAAR,CAApB;AACA,WAAO,gBAAE8C,IAAF,CAAO,gBAAEvC,KAAF,CAAQ,CAAR,EAAWoC,OAAOf,KAAlB,EAAyBlB,GAAzB,CAA6B,MAAMgC,QAAQG,WAAR,EAAqBF,MAArB,CAAnC,CAAP,CAAP;AACH,CAHD;AAIA,MAAMI,gBAAiBvB,WAAD,IAAiB;AACnC,UAAMwB,aAAa,gBAAEzC,KAAF,CAAQ,CAAR,EAAWiB,YAAYE,KAAvB,CAAnB;AACA,UAAMuB,cAAc,gBAAE1C,KAAF,CAAQ,CAAR,EAAWiB,YAAYG,MAAvB,CAApB;AACA,WAAOqB,WAAWtC,GAAX,CAAeC,KAAKsC,YAAYvC,GAAZ,CAAgBE,KAAKsC,OAAOvC,CAAP,EAAUC,CAAV,CAArB,CAApB,CAAP;AACH,CAJD;AAKA;;;AAGA,MAAMsC,SAAS,CAAChD,CAAD,EAAIE,CAAJ,KAAU;AACrB,WAAO;AACHF,SADG,EACAE,CADA,EACGgC,QAAQ,KADX,EACkBC,WAAW,CAD7B;AAEHlB,gBAAQ,KAFL,EAEYD,QAAQ,CAFpB,EAEuBiC,SAAS;AAFhC,KAAP;AAIH,CALD;AAMA,MAAM7B,YAAahB,GAAD,IAAS,gBAAEW,KAAF,CAAQX,GAAR,CAA3B;AACA,MAAM8C,kBAAmB5B,WAAD,IAAiB;AACrC,QAAI,CAACD,cAAcC,WAAd,CAAL,EACI,MAAM,IAAI6B,KAAJ,CAAU,6BAAV,CAAN;AACJ,UAAMC,aAAaP,cAAcvB,WAAd,CAAnB;AACA,UAAM+B,cAAcX,eAAeU,UAAf,EAA2B9B,WAA3B,CAApB;AACA,WAAOU,eAAeqB,WAAf,CAAP;AACH,CAND;QAOS1B,Y,GAAAA,Y;QAAcuB,e,GAAAA,e;QAAiBL,a,GAAAA,a;QAAeH,c,GAAAA,c;QAAgBV,c,GAAAA,c;QAAgBd,Y,GAAAA,Y;QAAcf,a,GAAAA,a;QAAe6C,M,GAAAA,M;QAAQZ,Y,GAAAA,Y;QAAcvB,Y,GAAAA,Y;QAAcjB,e,GAAAA,e;QAAiBe,Y,GAAAA,Y;QAAcS,S,GAAAA,S;AACvL","file":"Field.js","sourcesContent":["import R from 'ramda';\n/**\n * Checks if field has position.\n */\nconst positionIsValid = R.curry((field, p) => {\n    return p && p.x >= 0 && p.x < field.length && p.y >= 0 && p.y < field[0].length;\n});\n/**\n * Receives a pos and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    return R.remove(4, 1, R.flatten(range.map(i => range.map(j => {\n        return { x: pos.x + i, y: pos.y + j };\n    }))));\n};\nconst validNearPos = R.curry((field, pos) => R.filter(positionIsValid(field), nearPositions(pos)));\nconst openPosition = (pos) => {\n    const openedPos = R.clone(pos);\n    if (openedPos.marked !== 0)\n        return openedPos;\n    openedPos.opened = true;\n    return openedPos;\n};\nconst markPosition = (pos) => {\n    const markedPos = updatePos(pos);\n    if (markedPos.marked === 2)\n        markedPos.marked = 0;\n    else\n        markedPos.marked++;\n    return markedPos;\n};\nconst isValidConfig = (fieldConfig) => {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n};\nconst allPositions = (field) => field.reduce((a, b) => a.concat(b));\nconst countNearBombs = (field) => {\n    const countedField = R.clone(field);\n    allPositions(field).map(pos => {\n        if (pos.isBomb)\n            validNearPos(countedField, pos).map(p => countedField[p.x][p.y].nearBombs++);\n    }); // TODO immutable\n    return countedField;\n};\n// TODO use ptz-math and help with any math method you need\nconst getRandomPos = (field, fieldConfig) => {\n    const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n    const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n    return field[width][height];\n};\nconst bombPos = (field, config) => {\n    const pos = getRandomPos(field, config);\n    if (pos.isBomb) {\n        return bombPos(field, config);\n    }\n    pos.isBomb = true;\n    return field;\n};\n/**\n * Populate new field with bombs\n */\nconst getBombedField = (field, config) => {\n    const fieldToBomb = R.clone(field);\n    return R.last(R.range(0, config.bombs).map(() => bombPos(fieldToBomb, config)));\n};\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return widthRange.map(i => heightRange.map(j => newPos(i, j)));\n};\n/**\n * Get a new position\n */\nconst newPos = (x, y) => {\n    return {\n        x, y, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nconst updatePos = (pos) => R.clone(pos);\nconst getInitialField = (fieldConfig) => {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombedField(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n};\nexport { allPositions, getInitialField, getEmptyField, getBombedField, countNearBombs, markPosition, nearPositions, newPos, getRandomPos, openPosition, positionIsValid, validNearPos, updatePos };\n//# sourceMappingURL=Field.js.map"]}
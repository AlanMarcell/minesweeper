{"version":3,"sources":["../dist-esnext/Field.js"],"names":["getBombs","field","fieldConfig","i","bombs","width","Math","floor","random","heigth","isBomb","isValidConfig","totalFields","countNearBombs","countedField","map","col","colIndex","pos","index","j","x","y","nearBombs","getEmptyField","initialField","opened","marked","logField","firstLine","f","console","log","row","line","getInitialField","Error","emptyField","bombedField"],"mappings":"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","file":"Field.js","sourcesContent":["// import { LogFile } from 'ptz-log-file';\n// const log = LogFile({});\nfunction getBombs(field, fieldConfig) {\n    for (let i = 0; i < fieldConfig.bombs; i++) {\n        const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n        const heigth = Math.floor((fieldConfig.heigth - 1) * Math.random() + 1);\n        if (field[width][heigth] && field[width][heigth].isBomb)\n            i--;\n        field[width][heigth].isBomb = true;\n    }\n    return field;\n}\nfunction isValidConfig(fieldConfig) {\n    const totalFields = fieldConfig.width * fieldConfig.heigth;\n    return totalFields > fieldConfig.bombs ? true : false;\n}\nfunction countNearBombs(field) {\n    const countedField = field;\n    field.map((col, colIndex) => col.map((pos, index) => {\n        if (pos.isBomb) {\n            for (let i = -1; i < 2; i++) {\n                for (let j = -1; j < 2; j++) {\n                    if (countedField[pos.x + i] && countedField[pos.x + i][pos.y + j])\n                        countedField[pos.x + i][pos.y + j].nearBombs++;\n                }\n            }\n        }\n    }));\n    return countedField;\n}\nfunction getEmptyField(fieldConfig) {\n    const initialField = [];\n    for (let i = 0; i < fieldConfig.width; i++) {\n        initialField[i] = [];\n        for (let j = 0; j < fieldConfig.heigth; j++) {\n            const pos = { x: i, y: j, isBomb: false, nearBombs: 0, opened: false, marked: 0 };\n            initialField[i][j] = pos;\n        }\n    }\n    return initialField;\n}\nfunction logField(field) {\n    const countedField = field;\n    let firstLine = '   |';\n    field.map((f, index) => firstLine += ' ' + (index + 1) + ' |');\n    console.log(firstLine);\n    let row;\n    field.map((col, colIndex) => {\n        var line = '|';\n        row = '   ';\n        col.map((pos, index) => {\n            if (index === 0 && colIndex === 0)\n                line = line;\n            if (index === 0)\n                line = ' ' + (colIndex + 1) + ' |';\n            if (countedField[pos.x][pos.y].opened) {\n                if (countedField[pos.x][pos.y].isBomb) {\n                    line += ' * ';\n                    row += '---';\n                }\n                else {\n                    line += ' ' + countedField[pos.x][pos.y].nearBombs + ' ';\n                    row += '---';\n                }\n            }\n            else {\n                line += '   ';\n                row += '---';\n            }\n            line += '|';\n            row += '-';\n        });\n        console.log(row);\n        console.log(line);\n    });\n    console.log(row);\n}\nfunction getInitialField(fieldConfig) {\n    if (!isValidConfig(fieldConfig)) {\n        throw new Error('Invalid field configuration');\n    }\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombs(emptyField, fieldConfig);\n    const countedField = countNearBombs(bombedField);\n    return countedField;\n}\nexport { getInitialField, countNearBombs, logField };\n//# sourceMappingURL=Field.js.map"]}
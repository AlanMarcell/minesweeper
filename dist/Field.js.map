{"version":3,"sources":["../dist-esnext/Field.js"],"names":["getBombs","field","fieldConfig","i","bombs","width","Math","floor","random","heigth","isBomb","nearPositions","pos","arrayPos","j","push","x","y","isValidConfig","totalPositions","countNearBombs","countedField","map","col","p","nearBombs","console","log","logField","getEmptyField","initialField","opened","marked","isValid","firstLine","f","index","row","colIndex","line","getInitialField","Error","emptyField","bombedField"],"mappings":"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","file":"Field.js","sourcesContent":["function getBombs(field, fieldConfig) {\n    for (let i = 0; i < fieldConfig.bombs; i++) {\n        const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n        const heigth = Math.floor((fieldConfig.heigth - 1) * Math.random() + 1);\n        if (field[width][heigth] && field[width][heigth].isBomb)\n            i--;\n        field[width][heigth].isBomb = true;\n    }\n    return field;\n}\nfunction nearPositions(pos) {\n    // tslint:disable-next-line:prefer-const\n    let arrayPos = [];\n    for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n            if (i === 0 && j === 0)\n                continue;\n            arrayPos.push({ x: pos.x + i, y: pos.y + j });\n        }\n    }\n    return arrayPos;\n}\nfunction isValidConfig(fieldConfig) {\n    const totalPositions = fieldConfig.width * fieldConfig.heigth;\n    return totalPositions > fieldConfig.bombs ? true : false;\n}\nfunction countNearBombs(field) {\n    const countedField = field;\n    field.map(col => col.map(pos => {\n        if (pos.isBomb)\n            nearPositions(pos).map(p => {\n                if (countedField[p.x] && countedField[p.x][p.y])\n                    countedField[p.x][p.y].nearBombs++;\n            });\n    }));\n    console.log('countedField ----');\n    logField(countedField);\n    return countedField;\n}\nfunction getEmptyField(fieldConfig) {\n    const initialField = [];\n    for (let i = 0; i < fieldConfig.width; i++) {\n        initialField[i] = [];\n        for (let j = 0; j < fieldConfig.heigth; j++) {\n            const pos = {\n                x: i, y: j, isBomb: false, nearBombs: 0,\n                opened: false, marked: 0, isValid: true\n            };\n            initialField[i][j] = pos;\n        }\n    }\n    return initialField;\n}\nfunction logField(field) {\n    const countedField = field;\n    let firstLine = '   |';\n    field.map((f, index) => firstLine += ' ' + (index + 1) + ' |');\n    console.log(firstLine);\n    let row;\n    field.map((col, colIndex) => {\n        var line = '|';\n        row = '   ';\n        col.map((pos, index) => {\n            if (index === 0 && colIndex === 0)\n                line = line;\n            if (index === 0)\n                line = ' ' + (colIndex + 1) + ' |';\n            if (countedField[pos.x][pos.y].opened) {\n                if (countedField[pos.x][pos.y].isBomb) {\n                    line += ' * ';\n                    row += '---';\n                }\n                else {\n                    line += ' ' + countedField[pos.x][pos.y].nearBombs + ' ';\n                    row += '---';\n                }\n            }\n            else {\n                line += '   ';\n                row += '---';\n            }\n            line += '|';\n            row += '-';\n        });\n        console.log(row);\n        console.log(line);\n    });\n    console.log(row + '\\n');\n}\nfunction getInitialField(fieldConfig) {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombs(emptyField, fieldConfig);\n    const countedField = countNearBombs(bombedField);\n    return countedField;\n}\nexport { getInitialField, countNearBombs, logField, nearPositions };\n//# sourceMappingURL=Field.js.map"]}
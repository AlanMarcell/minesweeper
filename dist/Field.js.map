{"version":3,"sources":["../dist-esnext/Field.js"],"names":["positionIsValid","curry","field","p","x","length","y","nearPositions","pos","range","flatten","remove","map","i","j","validNearPos","filter","openPosition","openedPos","marked","opened","markPosition","markedPos","updatePos","isValidConfig","fieldConfig","totalPositions","width","height","bombs","allPositions","reduce","a","b","concat","countNearBombs","countedField","isBomb","nearBombs","getRandomPos","Math","floor","random","bombPos","config","getBombedField","fieldToBomb","clone","last","getEmptyField","widthRange","heightRange","newPos","isValid","getInitialField","Error","emptyField","bombedField"],"mappings":"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","file":"Field.js","sourcesContent":["import R from 'ramda';\n/**\n * Checks if field has position.\n */\nconst positionIsValid = R.curry((field, p) => {\n    return p && p.x >= 0 && p.x < field.length && p.y >= 0 && p.y < field[0].length;\n});\n/**\n * Receives a pos and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    return R.flatten(R.remove(4, 1, range.map(i => range.map(j => {\n        return { x: pos.x + i, y: pos.y + j };\n    }))));\n};\nconst validNearPos = R.curry((field, pos) => R.filter(positionIsValid(field), nearPositions(pos)));\nconst openPosition = (pos) => {\n    const openedPos = pos;\n    if (openedPos.marked !== 0)\n        return openedPos;\n    openedPos.opened = true;\n    return openedPos;\n};\nconst markPosition = (pos) => {\n    const markedPos = updatePos(pos);\n    if (markedPos.marked === 2)\n        markedPos.marked = 0;\n    else\n        markedPos.marked++;\n    return markedPos;\n};\nconst isValidConfig = (fieldConfig) => {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n};\nconst allPositions = (field) => field.reduce((a, b) => a.concat(b));\nconst countNearBombs = (field) => {\n    const countedField = field;\n    allPositions(field).map(pos => {\n        if (pos.isBomb)\n            validNearPos(field, pos).map(p => countedField[p.x][p.y].nearBombs++);\n    }); // TODO immutable\n    return countedField;\n};\n// TODO use ptz-math and help with any math method you need\nconst getRandomPos = (field, fieldConfig) => {\n    const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n    const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n    return field[width][height];\n};\nconst bombPos = (field, config) => {\n    const pos = getRandomPos(field, config);\n    if (pos.isBomb) {\n        return bombPos(field, config);\n    }\n    pos.isBomb = true;\n    return field;\n};\n/**\n * Populate new field with bombs\n */\nconst getBombedField = (field, config) => {\n    const fieldToBomb = R.clone(field);\n    return R.last(R.range(0, config.bombs).map(() => bombPos(fieldToBomb, config)));\n};\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return widthRange.map(i => heightRange.map(j => newPos(i, j)));\n};\n/**\n * Get a new position\n */\nconst newPos = (x, y) => {\n    return {\n        x, y, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nconst updatePos = (pos) => R.clone(pos);\nconst getInitialField = (fieldConfig) => {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombedField(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n};\nexport { allPositions, getInitialField, getEmptyField, getBombedField, countNearBombs, markPosition, nearPositions, newPos, openPosition, positionIsValid, validNearPos, updatePos };\n//# sourceMappingURL=Field.js.map"]}
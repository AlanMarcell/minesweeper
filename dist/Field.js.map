{"version":3,"sources":["../dist-esnext/Field.js"],"names":["getBombs","field","fieldConfig","i","bombs","width","Math","floor","random","height","isBomb","nearPositions","pos","range","arrayPos","remove","map","x","y","j","reduce","a","b","concat","isValidConfig","totalPositions","allPositions","countNearBombs","countedField","p","nearBombs","getEmptyField","widthRange","heightRange","newPos","opened","marked","isValid","logField","firstLine","f","index","console","log","row","col","colIndex","line","getInitialField","Error","emptyField","bombedField"],"mappings":"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","file":"Field.js","sourcesContent":["import R from 'ramda';\n/**\n * Populate new field with bombs\n */\nconst getBombs = (field, fieldConfig) => {\n    for (let i = 0; i < fieldConfig.bombs; i++) {\n        const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n        const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n        if (field[width][height] && field[width][height].isBomb)\n            i--;\n        field[width][height].isBomb = true;\n    }\n    return field;\n};\n/**\n * Receives a pos and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    const arrayPos = R.remove(4, 1, range.map(i => range.map(j => {\n        return { x: pos.x + i, y: pos.y + j };\n    })));\n    return arrayPos.reduce((a, b) => a.concat(b));\n};\nfunction isValidConfig(fieldConfig) {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n}\nconst allPositions = (field) => field.reduce((a, b) => a.concat(b));\nfunction countNearBombs(field) {\n    const countedField = field;\n    allPositions(field).map(pos => {\n        if (pos.isBomb)\n            nearPositions(pos).map(p => {\n                if (countedField[p.x] && countedField[p.x][p.y])\n                    countedField[p.x][p.y].nearBombs++;\n            });\n    });\n    return countedField;\n}\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return widthRange.map(i => heightRange.map(j => newPos(i, j)));\n};\n/**\n * Get a new position\n */\nconst newPos = (i, j) => {\n    return {\n        x: i, y: j, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nfunction logField(field) {\n    const countedField = field;\n    let firstLine = '   |';\n    field.map((f, index) => firstLine += ' ' + (index + 1) + ' |');\n    console.log(firstLine);\n    let row;\n    field.map((col, colIndex) => {\n        var line = '|';\n        row = '   ';\n        col.map((pos, index) => {\n            if (index === 0 && colIndex === 0)\n                line = line;\n            if (index === 0)\n                line = ' ' + (colIndex + 1) + ' |';\n            if (countedField[pos.x][pos.y].opened) {\n                if (countedField[pos.x][pos.y].isBomb) {\n                    line += ' * ';\n                    row += '---';\n                }\n                else {\n                    line += ' ' + countedField[pos.x][pos.y].nearBombs + ' ';\n                    row += '---';\n                }\n            }\n            else {\n                line += '   ';\n                row += '---';\n            }\n            line += '|';\n            row += '-';\n        });\n        console.log(row);\n        console.log(line);\n    });\n    console.log(row + '\\n');\n}\nfunction getInitialField(fieldConfig) {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombs(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n}\nexport { getInitialField, countNearBombs, logField, nearPositions };\n//# sourceMappingURL=Field.js.map"]}
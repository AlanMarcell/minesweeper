{"version":3,"sources":["../dist-esnext/Field.js"],"names":["positionIsValid","curry","field","p","x","length","y","nearPositions","pos","range","flatten","remove","map","i","j","validNearPos","filter","openPosition","openedPos","opened","markPosition","console","log","markedPos","updatePos","marked","isValidConfig","fieldConfig","totalPositions","width","height","bombs","allPositions","reduce","a","b","concat","countNearBombs","countedField","isBomb","nearBombs","getRandomPos","Math","floor","random","bombPos","config","getBombedField","fieldToBomb","clone","last","getEmptyField","widthRange","heightRange","newPos","isValid","getInitialField","Error","emptyField","bombedField"],"mappings":"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","file":"Field.js","sourcesContent":["import R from 'ramda';\n/**\n * Checks if field has position.\n */\nconst positionIsValid = R.curry((field, p) => {\n    return p.x >= 0 && p.x < field.length && p.y >= 0 && p.y < field[0].length;\n});\n/**\n * Receives a pos and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    return R.flatten(R.remove(4, 1, range.map(i => range.map(j => {\n        return { x: pos.x + i, y: pos.y + j };\n    }))));\n};\nconst validNearPos = R.curry((field, pos) => R.filter(positionIsValid(field), nearPositions(pos)));\nconst openPosition = (pos) => {\n    const openedPos = pos;\n    openedPos.opened = true;\n    return openedPos;\n};\nconst markPosition = (pos) => {\n    console.log('MARKPOS FIELD');\n    console.log('MARKED FIELD POS', pos);\n    const markedPos = updatePos(pos);\n    if (markedPos.marked === 2)\n        markedPos.marked = 0;\n    else\n        markedPos.marked++;\n    console.log('MARKED FIELD POS', markedPos);\n    return markedPos;\n};\nconst isValidConfig = (fieldConfig) => {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n};\nconst allPositions = (field) => field.reduce((a, b) => a.concat(b));\nconst countNearBombs = (field) => {\n    const countedField = field;\n    allPositions(field).map(pos => {\n        if (pos.isBomb)\n            validNearPos(field, pos).map(p => countedField[p.x][p.y].nearBombs++);\n    }); // TODO immutable\n    return countedField;\n};\n// TODO use ptz-math and help with any math method you need\nconst getRandomPos = (field, fieldConfig) => {\n    const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n    const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n    return field[width][height];\n};\nconst bombPos = (field, config) => {\n    const pos = getRandomPos(field, config);\n    if (pos.isBomb) {\n        return bombPos(field, config);\n    }\n    pos.isBomb = true;\n    return field;\n};\n/**\n * Populate new field with bombs\n */\nconst getBombedField = (field, config) => {\n    const fieldToBomb = R.clone(field);\n    return R.last(R.range(0, config.bombs).map(() => bombPos(fieldToBomb, config)));\n};\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return widthRange.map(i => heightRange.map(j => newPos(i, j)));\n};\n/**\n * Get a new position\n */\nconst newPos = (x, y) => {\n    return {\n        x, y, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nconst updatePos = (pos) => R.clone(pos);\nconst getInitialField = (fieldConfig) => {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombedField(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n};\nexport { allPositions, getInitialField, getEmptyField, getBombedField, countNearBombs, markPosition, nearPositions, newPos, openPosition, positionIsValid, validNearPos, updatePos };\n//# sourceMappingURL=Field.js.map"]}